filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
arrange(Total_spend) %>%
slice(1:20)
ggplot(df) + geom_bar(aes(x = Generic.Name, y = Total_spend))
})
}
shinyApp(ui = ui, server = server)
library(ggplot2)
library(ggplot2)
shinyApp(ui = ui, server = server)
?geom_bar
##' SERVER ###########################################
server<-function(input, output) {
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
Dataset <- read.xlsx(input$file$datapath) %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
return(Dataset)
})
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
#creation of groups ############### in progress
values <- reactiveValues(df_data = NULL)
observeEvent(input$pushgrp, {
temp = list(input$selected_drugs_list)
names(temp) <- eval(input$group_name)
values$df_data <- c(values$df_data,temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({as.data.frame(values$df_data)})
#############
##this makes the main output with totals and monthly per group/drug
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
arrange(Total_spend) %>%
slice(1:20)
ggplot(df) + geom_bar(aes(x = Generic.Name, y = Total_spend), stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
##' SERVER ###########################################
server<-function(input, output) {
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
Dataset <- read.xlsx(input$file$datapath) %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
return(Dataset)
})
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
#creation of groups ############### in progress
values <- reactiveValues(df_data = NULL)
observeEvent(input$pushgrp, {
temp = list(input$selected_drugs_list)
names(temp) <- eval(input$group_name)
values$df_data <- c(values$df_data,temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({as.data.frame(values$df_data)})
#############
##this makes the main output with totals and monthly per group/drug
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = Generic.Name, y = Total_spend), stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
##' SERVER ###########################################
server<-function(input, output) {
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
Dataset <- read.xlsx(input$file$datapath) %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
return(Dataset)
})
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
#creation of groups ############### in progress
values <- reactiveValues(df_data = NULL)
observeEvent(input$pushgrp, {
temp = list(input$selected_drugs_list)
names(temp) <- eval(input$group_name)
values$df_data <- c(values$df_data,temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({as.data.frame(values$df_data)})
#############
##this makes the main output with totals and monthly per group/drug
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend) %>%
arrange(Total_spend)
ggplot(df) + geom_bar(aes(x = Generic.Name, y = Total_spend), stat = 'identity')
})
}
shinyApp(ui = ui, server = server)
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
df <- df %>% df <- df %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
df <- df %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
View(df)
##' SERVER ###########################################
server<-function(input, output) {
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
Dataset <- read.xlsx(input$file$datapath) %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
return(Dataset)
})
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
#creation of groups ############### in progress
values <- reactiveValues(df_data = NULL)
observeEvent(input$pushgrp, {
temp = list(input$selected_drugs_list)
names(temp) <- eval(input$group_name)
values$df_data <- c(values$df_data,temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({as.data.frame(values$df_data)})
#############
##this makes the main output with totals and monthly per group/drug
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, value), y = Total_spend), stat = 'identity')
})
}
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, value), y = Total_spend), stat = 'identity')
reorder
?reorder
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity')
df <- read.xlsx(xlsx_location) %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA)
df %>% group_by(Generic.Name) %>% summarize(sum = sum(Total.Spend))
test <- df %>% group_by(Generic.Name) %>% summarize(sum = sum(Total.Spend))
View(test)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
df <- df %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
##' SERVER ###########################################
server<-function(input, output) {
Dataset <- reactive({
if (is.null(input$file)) {
# User has not uploaded a file yet
return(data.frame())
}
Dataset <- read.xlsx(input$file$datapath) %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
return(Dataset)
})
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
#creation of groups ############### in progress
values <- reactiveValues(df_data = NULL)
observeEvent(input$pushgrp, {
temp = list(input$selected_drugs_list)
names(temp) <- eval(input$group_name)
values$df_data <- c(values$df_data,temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({as.data.frame(values$df_data)})
#############
##this makes the main output with totals and monthly per group/drug
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
}
shinyApp(ui = ui, server = server)
