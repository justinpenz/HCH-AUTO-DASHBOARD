full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum) %>%
mutate(Percent_Change = (Timeframe2 - Timeframe1) * 100 /Timeframe2)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
######################################################TAB TWO #############################################################
output$selectdrugPlot <- renderUI({
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('plotDrug', 'Choose Drug to Plot', sort(drug_list))
})
output$drugPlot <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(Generic.Name == input$plotDrug)
try(ggplot(df) + geom_smooth(aes(x = Date, y = Total.Spend)))
ggplot(df) + geom_point(aes(x = Date, y = Total.Spend, color = Generic.Name))
})
}
shinyApp(ui = ui, server = server)
server<-function(input, output) {
##############################################TAB ONE #######################################################
########################MAIN DATASET FROM UPLOAD############################
Dataset <- reactive({
#### returns blank data.frame() if there is no data yet. prevents errors.
if (is.null(input$file)) {
return(data.frame())
}
### rows in input$file aree the different data items.  this iteratively binds them into Dataset
Dataset <- data.frame()
for(n in 1:nrow(input$file)){
Dataset <- Dataset %>% bind_rows(read.xlsx(input$file[[n, 'datapath']]))
}
### Data munging
Dataset <- Dataset %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
##this allows Dataset() [the name of this function] to always return the reactive DF built from UI input
return(Dataset)
})
#############################REACTIVE UI ELEMENTS###########################
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
selectizeInput('selected_drugs_list', 'Choose or Search for Drugs', choices = sort(drug_list), multiple = TRUE)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
###########################BUILDING OF GROUPINGS OF DRUGS######################
values <- reactiveValues(df_data = data.frame(drug = NA, group_name = NA, GROUP_id = NA))   #INITIALIZE GROUP. VALUES IS THE GROUP DF
observeEvent(input$pushgrp, {              #IF MAKE GROUP BUTTON IS PUSHED, ADD CURRENT SELECTED DRUGS AS grouped item to values
pushID = input$pushgrp
grp_name <- eval(input$group_name)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = NA )
values$df_data <- bind_rows(values$df_data, temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({values$df_data})   #kill this maybe for final development version?
#################this makes the main output with totals and monthly per group/drug#####################################
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum) %>%
mutate(Percent_Change = (Timeframe2 - Timeframe1) * 100 /Timeframe2)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
######################################################TAB TWO #############################################################
output$selectdrugPlot <- renderUI({
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('plotDrug', 'Choose Drug to Plot', sort(drug_list))
})
output$drugPlot <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(Generic.Name == input$plotDrug)
try(ggplot(df) + geom_smooth(aes(x = Date, y = Total.Spend)))
ggplot(df) + geom_point(aes(x = Date, y = Total.Spend, color = Generic.Name))
})
}
shinyApp(ui = ui, server = server)
server<-function(input, output) {
##############################################TAB ONE #######################################################
########################MAIN DATASET FROM UPLOAD############################
Dataset <- reactive({
#### returns blank data.frame() if there is no data yet. prevents errors.
if (is.null(input$file)) {
return(data.frame())
}
### rows in input$file aree the different data items.  this iteratively binds them into Dataset
Dataset <- data.frame()
for(n in 1:nrow(input$file)){
Dataset <- Dataset %>% bind_rows(read.xlsx(input$file[[n, 'datapath']]))
}
### Data munging
Dataset <- Dataset %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
##this allows Dataset() [the name of this function] to always return the reactive DF built from UI input
return(Dataset)
})
#############################REACTIVE UI ELEMENTS###########################
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
selectizeInput('selected_drugs_list', 'Choose or Search for Drugs', choices = sort(drug_list), multiple = TRUE)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
###########################BUILDING OF GROUPINGS OF DRUGS######################
values <- reactiveValues(df_data = data.frame(drug = NA, group_name = NA, GROUP_id = NA))   #INITIALIZE GROUP. VALUES IS THE GROUP DF
observeEvent(input$pushgrp, {              #IF MAKE GROUP BUTTON IS PUSHED, ADD CURRENT SELECTED DRUGS AS grouped item to values
pushID = input$pushgrp
grp_name <- eval(input$group_name)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = input$selected_drugs_list )
values$df_data <- bind_rows(values$df_data, temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({values$df_data})   #kill this maybe for final development version?
#################this makes the main output with totals and monthly per group/drug#####################################
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum) %>%
mutate(Percent_Change = (Timeframe2 - Timeframe1) * 100 /Timeframe2)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
######################################################TAB TWO #############################################################
output$selectdrugPlot <- renderUI({
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('plotDrug', 'Choose Drug to Plot', sort(drug_list))
})
output$drugPlot <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(Generic.Name == input$plotDrug)
try(ggplot(df) + geom_smooth(aes(x = Date, y = Total.Spend)))
ggplot(df) + geom_point(aes(x = Date, y = Total.Spend, color = Generic.Name))
})
}
shinyApp(ui = ui, server = server)
server<-function(input, output) {
##############################################TAB ONE #######################################################
########################MAIN DATASET FROM UPLOAD############################
Dataset <- reactive({
#### returns blank data.frame() if there is no data yet. prevents errors.
if (is.null(input$file)) {
return(data.frame())
}
### rows in input$file aree the different data items.  this iteratively binds them into Dataset
Dataset <- data.frame()
for(n in 1:nrow(input$file)){
Dataset <- Dataset %>% bind_rows(read.xlsx(input$file[[n, 'datapath']]))
}
### Data munging
Dataset <- Dataset %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
##this allows Dataset() [the name of this function] to always return the reactive DF built from UI input
return(Dataset)
})
#############################REACTIVE UI ELEMENTS###########################
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
selectizeInput('selected_drugs_list', 'Choose or Search for Drugs', choices = sort(drug_list), multiple = TRUE)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
###########################BUILDING OF GROUPINGS OF DRUGS######################
values <- reactiveValues(df_data = data.frame(drug = NA, group_name = NA, GROUP_id = NA))   #INITIALIZE GROUP. VALUES IS THE GROUP DF
observeEvent(input$pushgrp, {              #IF MAKE GROUP BUTTON IS PUSHED, ADD CURRENT SELECTED DRUGS AS grouped item to values
pushID = input$pushgrp
grp_name <- eval(input$group_name)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = input$selected_drugs_list )
values$df_data <- bind_rows(values$df_data, temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({values$df_data})   #kill this maybe for final development version?
#################this makes the main output with totals and monthly per group/drug#####################################
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum) %>%
mutate(Percent_Change = (Timeframe2 - Timeframe1) * 100 /Timeframe2)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
######################################################TAB TWO #############################################################
output$selectdrugPlot <- renderUI({
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('plotDrug', 'Choose Drug to Plot', sort(drug_list))
})
output$drugPlot <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(Generic.Name == input$plotDrug)
try(ggplot(df) + geom_smooth(aes(x = Date, y = Total.Spend)))
ggplot(df) + geom_point(aes(x = Date, y = Total.Spend, color = Generic.Name))
})
}
data.frame(ID = 1, P = 2, C = c(1,2,3,4))
server<-function(input, output) {
##############################################TAB ONE #######################################################
########################MAIN DATASET FROM UPLOAD############################
Dataset <- reactive({
#### returns blank data.frame() if there is no data yet. prevents errors.
if (is.null(input$file)) {
return(data.frame())
}
### rows in input$file aree the different data items.  this iteratively binds them into Dataset
Dataset <- data.frame()
for(n in 1:nrow(input$file)){
Dataset <- Dataset %>% bind_rows(read.xlsx(input$file[[n, 'datapath']]))
}
### Data munging
Dataset <- Dataset %>%
mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric
separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns
mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits
mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.
mutate(Date = parse_date_time(as.character(Date), orders = "uYW")) %>%
mutate(Month = month(Date)) %>%
mutate(Group = NA) %>%
as.data.frame()
##this allows Dataset() [the name of this function] to always return the reactive DF built from UI input
return(Dataset)
})
#############################REACTIVE UI ELEMENTS###########################
output$selectDrugs <- renderUI({
input$pushgrp
drug_list = unique(Dataset()$Generic.Name)
selectizeInput('selected_drugs_list', 'Choose or Search for Drugs', choices = sort(drug_list), multiple = TRUE)
})
output$selectRange <- renderUI({
time_range = list(min = min(Dataset()$Date, na.rm = T),
max = max(Dataset()$Date, na.rm = T))
string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))
p(string)
})
###########################BUILDING OF GROUPINGS OF DRUGS######################
values <- reactiveValues(df_data = data.frame(drug = NA, group_name = NA, GROUP_id = NA))   #INITIALIZE GROUP. VALUES IS THE GROUP DF
observeEvent(input$pushgrp, {              #IF MAKE GROUP BUTTON IS PUSHED, ADD CURRENT SELECTED DRUGS AS grouped item to values
pushID = input$pushgrp
grp_name <- eval(input$group_name)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = as.vector(input$selected_drugs_list ))
values$df_data <- bind_rows(values$df_data, temp)
})
observeEvent(input$pushsingle, {
temp = as.list(input$selected_drugs_list)
names(temp) <- c(input$selected_drugs_list)
values$df_data <- c(values$df_data,temp)
})
output$table10 <- renderDataTable({values$df_data})   #kill this maybe for final development version?
#################this makes the main output with totals and monthly per group/drug#####################################
output$table2 <- renderTable({
df <- Dataset()
##below assigns each group/single in a named list as a item in df$group.
for(n in names(values$df_data)){
group_name = n
group_drugs = values$df_data[[n]]
df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)
}
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))
names(daterange1) <- c('min', 'max')
daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))
names(daterange2) <- c('min', 'max')
working_df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(!is.na(Group))
totals_by_month <- working_df %>%
group_by(Group, Month) %>%
summarize(sum = sum(Total.Spend, na.rm = T))
totals_by_Timeframe1 <- working_df %>%
filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%
group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))
totals_by_Timeframe2 <- working_df %>%
filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%
group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))
table <- full_join(totals_by_month, totals_by_Timeframe1, by = "Group") %>%
full_join(totals_by_Timeframe2, by ='Group') %>%
mutate(Month = month.abb[Month]) %>%
spread(Month, sum) %>%
mutate(Percent_Change = (Timeframe2 - Timeframe1) * 100 /Timeframe2)
table
})
output$summaryTable <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
group_by(Generic.Name) %>%
summarize(Total_spend = sum(Total.Spend)) %>%
top_n(20, Total_spend)
ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))
})
######################################################TAB TWO #############################################################
output$selectdrugPlot <- renderUI({
drug_list = unique(Dataset()$Generic.Name)
checkboxGroupInput('plotDrug', 'Choose Drug to Plot', sort(drug_list))
})
output$drugPlot <- renderPlot({
daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))
names(daterange0) <- c('min', 'max')
df <- Dataset()
df <- df %>%
filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%
filter(Generic.Name == input$plotDrug)
try(ggplot(df) + geom_smooth(aes(x = Date, y = Total.Spend)))
ggplot(df) + geom_point(aes(x = Date, y = Total.Spend, color = Generic.Name))
})
}
shinyApp(ui = ui, server = server)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = as.vector(input$selected_drugs_list ))
grp_name = 'hello'
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = as.vector(input$selected_drugs_list ))
pushID = numeric(1)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = as.vector(input$selected_drugs_list ))
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = as.vector(list(1,23,3,34,234,3)))
temp
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = as.vector(list(1,23,3,34,234,3)))
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = c(1,23,3,34,234,3)))
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = c(1,23,3,34,234,3))
temp
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = c(1,23,3,34,234,3))
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = c(1,23,3,34,234,3))
temp
View(temp)
grp_name = 'hello'
pushID = numeric(1)
temp <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = c(1,23,3,34,234,3))
temp
View(temp)
tempzz <- data.frame(group_name = grp_name, GROUP_id = pushID, drug = c(1,23,3,34,234,3))
tempzz
