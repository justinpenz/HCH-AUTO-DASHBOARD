{
    "collab_server" : "",
    "contents" : "---\ntitle: \"IGI mrgsolve Shiny\"\nauthor: \"Justin Penzenstadler\"\ndate: \"September 15, 2016\"\noutput: html_document\n---\n\n```{r}\nlibrary(shiny)\n```\n\n\n\n```{r}\nui<- fluidPage(\n    titlePanel(\"TO Auto-builder\"),\n    sidebarLayout(\n      sidebarPanel(\n        fileInput('file', label = h3(\"File input\")),\n        uiOutput('selectDrugs'),\n        uiOutput('selectRange'),\n        dateRangeInput('dateRange0',\n        label = 'Select Total Timeframe',\n        start = Sys.Date() - 2, end = Sys.Date() + 2, separator = 'to'),\n        dateRangeInput('dateRange1',\n        label = 'Select Comparator Timeframe 1',\n        start = Sys.Date() - 2, end = Sys.Date() + 2, separator = 'to'),\n        dateRangeInput('dateRange2',\n        label = 'Select Comparator Timeframe 2',\n        start = Sys.Date() - 2, end = Sys.Date() + 2, separator = 'to')),\n      mainPanel(tableOutput(\"table\")\n      )\n    )\n  )\n  \n```\n\n\n```{r}\n  ##' SERVER ###########################################\nserver<-function(input, output) {\n    \n    Dataset <- reactive({\n    if (is.null(input$file)) {\n      # User has not uploaded a file yet\n      return(data.frame())\n    }\n    \n    Dataset <- as.data.frame(do.call(input$readFunction,c(list(input$file$datapath),argList)))\n    return(Dataset)\n  })\n  \n  \n   output$table <- renderTable({\n    \n    if (is.null(input$vars) || length(input$vars)==0) return(NULL)\n    \n    return(Dataset()[,input$vars,drop=FALSE])\n  })\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n     \n    output$selectDrugs <- renderUI({\n        drug_list = unique(df$Generic.Name)\n        checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)\n    })\n    \n    output$selectRange <- renderUI({\n        string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))\n        p(string)\n    })\n    \n    output$table2 <- renderTable({\n\n            inFile <- input$SOURCE\n           \n           if (is.null(inFile))\n            return(NULL)\n           \n           xlsx_location = \n          \n           df <- read.xlsx(xlsx_location) %>%\n              mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric\n              separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns \n              mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits\n              mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.\n              mutate(Date = parse_date_time(as.character(Date), orders = \"uYW\")) %>% \n              mutate(Month = month(Date)) %>% \n              mutate(Group = NA)\n                        \n            selected_drugs_list = input$selected_drugs_list \n            names(selected_drugs_list) = input$selected_drugs_list\n                \n            for(n in names(selected_drugs_list)){\n               group_name = n\n               group_drugs = groups[[n]]\n               df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)\n                }\n      \n      \n            \n            daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))\n      \n            names(daterange0) <- c('min', 'max')\n            \n            daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))\n            names(daterange1) <- c('min', 'max')\n            \n            \n            daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))\n            names(daterange2) <- c('min', 'max')\n            \n        \n            working_df <- df %>% filter(Date >= daterange0$min & Date < daterange0$max) %>%\n                filter(!is.na(Group))\n        \n            totals_by_month <- working_df %>% group_by(Group, Month) %>% summarize(sum = sum(Total.Spend, na.rm = T))\n        \n            Timeframe_1_totals <- working_df %>% \n                filter(Date >= daterange1$min & Date < daterange1$max) %>% \n                group_by(Group) %>% \n                summarize(Total_Timeframe_1 = sum(Total.Spend))\n            \n            Timeframe_2_totals <- working_df %>% \n                filter(Date >= daterange2$min & Date < daterange2$max) %>% \n                group_by(Group) %>% \n                summarize(Total_Timeframe_2 = sum(Total.Spend))\n            \n            table <- full_join(totals_by_month, Timeframe_1_totals, by = \"Group\") %>% \n              full_join(Timeframe_2_totals, by ='Group') \n            table\n            \n  })\n}\n\n```\n  ##' Run the shiny app\n```{r}\n\n\n\n\n\nshinyApp(ui = ui, server = server)\n\n```\n\n\n\n\n\n\n",
    "created" : 1484863644794.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3262289670",
    "id" : "C1CB9C40",
    "lastKnownWriteTime" : 1484863631,
    "last_content_update" : 1484873277872,
    "path" : "F:/Desktop/Dashboard auto/shiny app.Rmd",
    "project_path" : "shiny app.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}