{
    "collab_server" : "",
    "contents" : "---\ntitle: \"IGI mrgsolve Shiny\"\nauthor: \"Justin Penzenstadler\"\ndate: \"September 15, 2016\"\noutput: html_document\n---\n\n```{r}\nlibrary(shiny)\nlibrary(tidyr)\nlibrary(ggplot2)\n```\n\n\n\n```{r}\nui<- fluidPage(\n    titlePanel(\"TO Auto-builder\"),\n    sidebarLayout(\n      sidebarPanel(\n        fileInput('file', label = h3(\"File input\")),\n        uiOutput('selectDrugs'),\n        textInput('group_name', 'Group Name - No Spaces', 'Add Group Name Here'),\n        actionButton('pushgrp',\"PUSH TO ADD TO GROUP\"),\n        actionButton('pushsingle',\"PUSH TO ADD ALL AS SINGLE\"),\n        uiOutput('selectRange'),\n        dateRangeInput('dateRange0',\n        label = 'Select Total Timeframe',\n        start = Sys.Date() - 365, end = Sys.Date() + 365, separator = 'to'),\n        dateRangeInput('dateRange1',\n        label = 'Select Comparator Timeframe 1',\n        start = Sys.Date() - 2, end = Sys.Date() + 2, separator = 'to'),\n        dateRangeInput('dateRange2',\n        label = 'Select Comparator Timeframe 2',\n        start = Sys.Date() - 2, end = Sys.Date() + 2, separator = 'to')),\n      mainPanel(tableOutput(\"table2\"),\n                plotOutput('summaryTable')\n      )\n    )\n  )\n  \n```\n\n\n```{r}\n  ##' SERVER ###########################################\nserver<-function(input, output) {\n  \n  Dataset <- reactive({\n    if (is.null(input$file)) {\n      # User has not uploaded a file yet\n      return(data.frame())\n    }\n    \n    Dataset <- read.xlsx(input$file$datapath) %>%\n              mutate(Week = gsub('Week ', '', Week)) %>%          ##make Week numeric\n              separate(Week, c('Week', 'Year'), ', ') %>%         ##separate Week/Year into different columns \n              mutate(Week = str_pad(Week, 2, pad = '0')) %>%       ##Pad Week so that it is always 2 digits\n              mutate(Date = as.numeric(paste(1,paste(Year, Week, sep = ''), sep = ''))) %>%  ##add a day (aka u in lubridate) for each date.  it is a bug.\n              mutate(Date = parse_date_time(as.character(Date), orders = \"uYW\")) %>% \n              mutate(Month = month(Date)) %>% \n              mutate(Group = NA) %>%\n              as.data.frame()\n    return(Dataset)\n  })  \n  \n  output$selectDrugs <- renderUI({\n        input$pushgrp \n        drug_list = unique(Dataset()$Generic.Name)\n        checkboxGroupInput('selected_drugs_list', 'Choose Drugs', drug_list)\n    })\n    \n  output$selectRange <- renderUI({\n        time_range = list(min = min(Dataset()$Date, na.rm = T), \n               max = max(Dataset()$Date, na.rm = T)) \n        string = paste('The Data Uploaded Contains Dates', as.character(time_range$min), as.character(time_range$max))\n        p(string)\n    })\n  \n#creation of groups ############### in progress\n \n values <- reactiveValues(df_data = NULL)\n\n  observeEvent(input$pushgrp, {\n    temp = list(input$selected_drugs_list)\n    names(temp) <- eval(input$group_name)\n    values$df_data <- c(values$df_data,temp)\n\n  })\n  \n  observeEvent(input$pushsingle, {\n    temp = as.list(input$selected_drugs_list)\n    names(temp) <- c(input$selected_drugs_list)\n    values$df_data <- c(values$df_data,temp)\n\n  })\n\noutput$table10 <- renderDataTable({as.data.frame(values$df_data)})\n  \n\n#############\n\n  \n  \n##this makes the main output with totals and monthly per group/drug\n  output$table2 <- renderTable({\n\n        df <- Dataset()\n              ##below assigns each group/single in a named list as a item in df$group.\n        for(n in names(values$df_data)){\n               group_name = n\n               group_drugs = values$df_data[[n]]\n               df$Group = ifelse(df$Generic.Name %in% group_drugs, n, df$Group)\n        }\n        \n\n            daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))\n            names(daterange0) <- c('min', 'max')\n            \n            daterange1 <- as.list(unlist(strsplit(as.character(input$dateRange1), 'to')))\n            names(daterange1) <- c('min', 'max')\n            \n            daterange2 <- as.list(unlist(strsplit(as.character(input$dateRange2), 'to')))\n            names(daterange2) <- c('min', 'max')\n            \n            \n          working_df <- df %>% \n            filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%\n                filter(!is.na(Group))\n          \n          \n            totals_by_month <- working_df %>% \n              group_by(Group, Month) %>% \n              summarize(sum = sum(Total.Spend, na.rm = T))\n        \n            totals_by_Timeframe1 <- working_df %>% \n              filter(ymd(Date) >= ymd(daterange1$min) & ymd(Date) < ymd(daterange1$max))%>%\n              group_by(Group) %>% summarize(Timeframe1 = sum(Total.Spend, na.rm = T))\n            \n            totals_by_Timeframe2 <- working_df %>% \n              filter(ymd(Date) >= ymd(daterange2$min) & ymd(Date) < ymd(daterange2$max))%>%\n              group_by(Group) %>% summarize(Timeframe2 = sum(Total.Spend, na.rm = T))\n            \n             table <- full_join(totals_by_month, totals_by_Timeframe1, by = \"Group\") %>% \n              full_join(totals_by_Timeframe2, by ='Group') %>% \n               mutate(Month = month.abb[Month]) %>%\n               spread(Month, sum)\n           \n            table\n            \n\n  })\n  \n  \n  \n  output$summaryTable <- renderPlot({\n    \n    daterange0 <- as.list(unlist(strsplit(as.character(input$dateRange0), 'to')))\n    names(daterange0) <- c('min', 'max')\n    \n    df <- Dataset()\n    df <- df %>% \n      filter(ymd(Date) >= ymd(daterange0$min) & ymd(Date) < ymd(daterange0$max)) %>%\n      group_by(Generic.Name) %>% \n      summarize(Total_spend = sum(Total.Spend)) %>% \n      top_n(20, Total_spend)\n    \n    ggplot(df) + geom_bar(aes(x = reorder(Generic.Name, Total_spend), y = Total_spend), stat = 'identity') + theme(axis.text.x = element_text(angle = 90, hjust = 1))\n    \n    })\n  \n  \n  \n}\n\n```\n\n```{r}\n\n\n\n\n\nshinyApp(ui = ui, server = server)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n",
    "created" : 1484914548778.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "624639526",
    "id" : "8DDE17F2",
    "lastKnownWriteTime" : 1485015712,
    "last_content_update" : 1485015712870,
    "path" : "C:/Users/Grace/Desktop/HC Germantown/Dashboard auto/shiny app attempt3.Rmd",
    "project_path" : "shiny app attempt3.Rmd",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}